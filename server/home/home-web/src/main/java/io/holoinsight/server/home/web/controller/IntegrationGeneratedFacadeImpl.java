/*
 * Copyright 2022 Holoinsight Project Authors. Licensed under Apache-2.0.
 */

package io.holoinsight.server.home.web.controller;

import io.holoinsight.server.common.J;
import io.holoinsight.server.common.JsonResult;
import io.holoinsight.server.home.biz.service.IntegrationGeneratedService;
import io.holoinsight.server.home.biz.service.UserOpLogService;
import io.holoinsight.server.home.common.util.MonitorException;
import io.holoinsight.server.home.common.util.scope.*;
import io.holoinsight.server.home.dal.model.IntegrationGenerated;
import io.holoinsight.server.home.dal.model.OpType;
import io.holoinsight.server.home.dal.model.dto.IntegrationGeneratedDTO;
import io.holoinsight.server.home.web.common.ManageCallback;
import io.holoinsight.server.home.web.common.ParaCheckUtil;
import io.holoinsight.server.home.web.interceptor.MonitorScopeAuth;
import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.*;

import java.util.Date;
import java.util.List;

/**
 * <p>
 * Date: 2023-03-13 Time: 18:35
 * </p>
 *
 * @author jsy1001de
 */
@RestController
@RequestMapping("/webapi/integrationGenerated")
@Slf4j
public class IntegrationGeneratedFacadeImpl extends BaseFacade {

  @Autowired
  private IntegrationGeneratedService integrationGeneratedService;

  @Autowired
  private UserOpLogService userOpLogService;

  @PostMapping("/update")
  @ResponseBody
  @MonitorScopeAuth(targetType = AuthTargetType.TENANT, needPower = PowerConstants.EDIT)
  public JsonResult<Boolean> update(@RequestBody IntegrationGeneratedDTO generatedDTO) {
    final JsonResult<Boolean> result = new JsonResult<>();
    facadeTemplate.manage(result, new ManageCallback() {
      @Override
      public void checkParameter() {
        ParaCheckUtil.checkParaNotNull(generatedDTO.id, "id");
        ParaCheckUtil.checkParaNotNull(generatedDTO.name, "name");
        ParaCheckUtil.checkParaNotNull(generatedDTO.item, "item");
        ParaCheckUtil.checkParaNotNull(generatedDTO.product, "product");
        ParaCheckUtil.checkParaNotNull(generatedDTO.config, "config");
        ParaCheckUtil.checkParaNotNull(generatedDTO.custom, "custom");

        MonitorScope ms = RequestContext.getContext().ms;
        IntegrationGeneratedDTO item = integrationGeneratedService.queryById(generatedDTO.getId(),
            ms.getTenant(), ms.getWorkspace());

        if (null == item) {
          throw new MonitorException("cannot find record: " + generatedDTO.getId());
        }
        ParaCheckUtil.checkEquals(item.getTenant(), ms.getTenant(), "tenant is illegal");

      }

      @Override
      public void doManage() {

        MonitorUser mu = RequestContext.getContext().mu;
        MonitorScope ms = RequestContext.getContext().ms;
        generatedDTO.setWorkspace(ms.getWorkspace());
        generatedDTO.setTenant(ms.getTenant());
        generatedDTO.setModifier(mu.getLoginName());
        generatedDTO.setGmtModified(new Date());
        generatedDTO.setDeleted(false);
        integrationGeneratedService.update(generatedDTO);
        IntegrationGenerated byId = integrationGeneratedService.getById(generatedDTO.getId());
        userOpLogService.append("integration_generated", byId.getId(), OpType.UPDATE,
            mu.getLoginName(), ms.getTenant(), ms.getWorkspace(), J.toJson(generatedDTO),
            J.toJson(byId), null, "integration_generated_update");
      }
    });

    return JsonResult.createSuccessResult(true);
  }

  @GetMapping("/query/{name}")
  @ResponseBody
  @MonitorScopeAuth(targetType = AuthTargetType.TENANT, needPower = PowerConstants.EDIT)
  public JsonResult<List<IntegrationGeneratedDTO>> queryByName(@PathVariable("name") String name) {
    final JsonResult<List<IntegrationGeneratedDTO>> result = new JsonResult<>();
    facadeTemplate.manage(result, new ManageCallback() {
      @Override
      public void checkParameter() {
        ParaCheckUtil.checkParaNotNull(name, "name");
      }

      @Override
      public void doManage() {
        MonitorScope ms = RequestContext.getContext().ms;
        List<IntegrationGeneratedDTO> integrationGeneratedDTOS =
            integrationGeneratedService.queryByName(ms.getTenant(), ms.getWorkspace(), name);
        JsonResult.createSuccessResult(result, integrationGeneratedDTOS);
      }
    });

    return result;
  }

}
